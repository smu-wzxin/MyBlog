<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                http://www.springframework.org/schema/context  
                 http://www.springframework.org/schema/context/spring-context-3.2.xsd  
                http://www.springframework.org/schema/tx 
                http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	
	<!--  1.数据源 : DruidDataSource
			destroy-method="close" : 的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用. 
			maxActive : 连接池支持的最大连接数，这里取值为20，表示同时最多有20个数据库连接。设 0 为没有限制.
			maxIdle : 连接池中最多可空闲maxIdle个连接 ，这里取值为3，表示即使没有数据库连接时依然可以保持3空闲的连接，而不被清除，随时处于待命状态。设 0 为没有限制.
			maxWait : 连接池中连接用完时,新的请求等待时间,毫秒，如果取值-1，表示无限等待，直到超时为止，这里取值1000，表示1秒后超时.
			defaultAutoCommit : 的意思是你如果没有使用事物来控制点的话，他会自动提交(一条语句执行就会提交).
			removeAbandoned : 是否自动回收超时连接.
			removeAbandonedTimeout : 超时时间(以秒数为单位).
	-->
	<bean id= "datasource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="jdbc:mysql://localhost:3306/blog"/>
		<property name="username" value="root"/>
		<property name="password" value="7878+-+"/>
<!-- 		<property name="url" value="jdbc:mysql://139.199.17.22:3306/wzxblog"/>
		<property name="username" value="wzxroot"/>
		<property name="password" value="wzxin+*/1"/> -->
		<property name="maxActive" value="20"/>
		<property name="maxIdle" value="3"/>
		<property name="maxWait" value="20000"/>
		<property name="defaultAutoCommit" value="true"/>
		<property name="removeAbandoned" value="true"/>
		<property name="removeAbandonedTimeout" value="60"/>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
	</bean>
	
	<!--  2.mybatis的SqlSession的工厂 : SqlSessionFactoryBean
			dataSource : 引用数据源
			configLocation : 指定src下的mybatis配置文件
	 -->
	<bean id= "sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="datasource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	
	<!--  3.mybatis自动扫描加载Sql映射文件 : MapperScannerConfigurer
			basePackage : 指定Sql映射文件/接口所在的包（自动扫描）
			sqlSessionFactory : 引用上面定义的sqlSessionFactory
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.smxy.blog.dao"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	
	<!--  4.事务管理 : DataSourceTransactionManager -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="datasource"/>
	</bean>
	
	<!--  5.使用声明式事务
			引用上面的事务管理器
	 -->
	<tx:annotation-driven transaction-manager="txManager"/>
</beans>